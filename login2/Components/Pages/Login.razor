@page "/login"
@using Microsoft.Data.SqlClient
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject IConfiguration Configuration
@inject login2.SqlConnectionService SqlService
@inject ILogger<LoginModel> Logger

<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red">@errorMessage</p>
}

@if (!isLoggedIn)
{
    <EditForm FormName="loginPage" Model=@loginModel OnSubmit="HandleLogin">
        
        <div class="form-group">
            <label for="Username">Username:</label>
            <InputText @bind-Value ="loginModel!.Username"  class="form-control" id="Username"></InputText>
            
        </div>
        <div>
            <label for="Password">Password:</label>
            <InputText @bind-Value ="loginModel!.Password" class="form-control" id="Password"></InputText>
            <ValidationMessage For =@(() => loginModel.Password) />
        </div>
        <button type="submit">Login</button>
    </EditForm>
    <p>Debug: Username is @loginModel.Username</p>
    <p>Debug: Password is @loginModel.Password</p>
}
else
{
    <p>Welcome, @loginModel.Username</p>
}

@code {
    [SupplyParameterFromForm]
    private LoginModel loginModel { get; set; } =new();
    private bool isLoggedIn = false;
    private string errorMessage = string.Empty;

    protected override void OnInitialized() => loginModel ??= new();
    
    private void Submit() => Logger.LogInformation("Username = {Username}", loginModel?.Username,"Password={Password}",loginModel?.Password);
   

    private async Task HandleLogin()
    {
        var connStr = Configuration.GetConnectionString("DefaultConnection");
        // Output to browser for debugging
        errorMessage = $"[Debug] Username: {loginModel.Username}, Password: {loginModel.Password}";
        StateHasChanged();

        Console.WriteLine("Here is Username:" + loginModel.Username);
        using (var conn = new SqlConnection(connStr))
        {
            await conn.OpenAsync();
            var cmd = new SqlCommand(@"
                SELECT COUNT(*) FROM Login
                WHERE RTRIM(LTRIM(UserName)) COLLATE SQL_Latin1_General_CP1_CI_AS = @Username
                  AND RTRIM(LTRIM(PassWord)) COLLATE SQL_Latin1_General_CP1_CI_AS = @Password", conn);

            cmd.Parameters.AddWithValue("@Username", loginModel.Username);
            cmd.Parameters.AddWithValue("@Password", loginModel.Password);

            var scalarResult = await cmd.ExecuteScalarAsync();
            int result = Convert.ToInt32(scalarResult);

            if (result > 0)
            {
                isLoggedIn = true;
                errorMessage = "";
                StateHasChanged(); // Force UI update after login
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
    }

    public class LoginModel
    {
        public int Id { get; set; }
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";


    }
    private List<MyDataModel>? data;

    protected override async Task OnInitializedAsync()
    {
        var cmd = SqlService.CreateCommand("SELECT Id, UserName,PassWord FROM Login");
        using var reader = await cmd.ExecuteReaderAsync();
        data = new List<MyDataModel>();
        while (await reader.ReadAsync())
        {
            data.Add(new MyDataModel
            {
                Id = reader.GetInt32(0),
                UserName = reader.GetString(1),
                Password = reader.GetString(2)
            });
        }
    }

    class MyDataModel
    {
        public int Id { get; set; }
        [Required]
        public string UserName { get; set; } = "";
        [Required]
        public string Password { get; set; } = "";
    }
}
